import sounddevice as sd
import soundfile as sf
import whisper
import noisereduce as nr # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º noisereduce
import torch

class SpeechToTextModule:
    def __init__(self, model_name="small", samplerate=16000, channels=2):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.

        Args:
            model_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Whisper –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "tiny", "base", "small", "medium", "large").
            samplerate (int): –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 16000 –ì—Ü).
            channels (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–ø–∏—Å–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1, –º–æ–Ω–æ).
        """
        self.model_name = model_name
        self.samplerate = samplerate
        self.channels = channels
        self.model = None # –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏

    def _load_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å Whisper, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞."""
        if self.model is None:
            print(f"‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å Whisper: {self.model_name}...")
            self.model = whisper.load_model(self.model_name)
            print("‚úÖ –ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

    def record_audio(self, duration=5):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.

        Args:
            duration (int): –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥).

        Returns:
            numpy.ndarray: –ó–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –≤ –≤–∏–¥–µ numpy –º–∞—Å—Å–∏–≤–∞.
        """
        print("üéôÔ∏è –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞...")
        recording = sd.rec(int(self.samplerate * duration), samplerate=self.samplerate, channels=self.channels)
        sd.wait()  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        print("‚èπÔ∏è –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return recording

    def transcribe_audio(self,  filename='last_input.mp3', audio_data="",):
        """
        –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏–∑ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º —Å –ø–æ–º–æ—â—å—é Whisper.

        Args:
            audio_data (numpy.ndarray): –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.
            filename (str): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "recording.wav").

        Returns:
            str: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        try:
            # 1. –®—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
            #reduced_noise = nr.reduce_noise(y=audio_data, sr=self.samplerate, prop_decrease=0.95)
            #sf.write(filename, reduced_noise, self.samplerate)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –ø–æ—Å–ª–µ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è

            self._load_model()
            print("üß† –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é Whisper...")
            result = self.model.transcribe(filename)
            transcription_text = result["text"]
            print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            torch.cuda.empty_cache()
            return transcription_text

        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")
            return None

    def process_voice(self, duration=5):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –µ–≥–æ.

        Args:
            duration (int): –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥).

        Returns:
            str: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        audio = self.record_audio(duration)
        self.save_audio_recording(audio)
        if audio is not None:
            return self.transcribe_audio("last_input.mp3")
        return None

    def play_recorded_audio(self, audio_data):
        """
        –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–∞–∫ sounddevice –º–∞—Å—Å–∏–≤.

        Args:
            audio_data (numpy.ndarray): –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (sounddevice –º–∞—Å—Å–∏–≤).
        """
        try:
            sd.play(audio_data, self.samplerate, blocking=True)
            sd.wait()  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            print("‚ñ∂Ô∏è  –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        except sd.PortAudioError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏–æ (sounddevice): {e}")
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")

    def save_audio_recording(self, audio_data, filename="last_input.mp3"):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ WAV —Ñ–∞–π–ª.

        Args:
            audio_data (numpy.ndarray): –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
            filename (str): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "recording_saved.wav").
        """
        try:
            sf.write(filename, audio_data, self.samplerate, format='mp3')
            print(f"üíæ –ê—É–¥–∏–æ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")